
-- 1) Create table if missing (no FK to auth.users to avoid coupling with reserved schema)
create table if not exists public.todos (
  id bigint generated by default as identity primary key,
  user_id uuid not null,
  task text,
  is_complete boolean default false,
  inserted_at timestamptz not null default timezone('utc'::text, now())
);

-- 2) Ensure RLS is enabled
alter table public.todos enable row level security;

-- 3) Drop old example policies if they exist (note the select policy has a trailing space in some snippets)
drop policy if exists "Individuals can create todos." on public.todos;
drop policy if exists "Individuals can update their own todos." on public.todos;
drop policy if exists "Individuals can delete their own todos." on public.todos;
drop policy if exists "Individuals can view their own todos. " on public.todos; -- with trailing space
drop policy if exists "Individuals can view their own todos." on public.todos;  -- without trailing space

-- 4) Create standardized policies for authenticated users only (idempotent via DO blocks)
do $$
begin
  if not exists (
    select 1 from pg_policies 
    where schemaname = 'public' and tablename = 'todos' and policyname = 'todos_insert_own'
  ) then
    create policy todos_insert_own
      on public.todos for insert to authenticated
      with check (auth.uid() = user_id);
  end if;
end$$;

do $$
begin
  if not exists (
    select 1 from pg_policies 
    where schemaname = 'public' and tablename = 'todos' and policyname = 'todos_select_own'
  ) then
    create policy todos_select_own
      on public.todos for select to authenticated
      using (auth.uid() = user_id);
  end if;
end$$;

do $$
begin
  if not exists (
    select 1 from pg_policies 
    where schemaname = 'public' and tablename = 'todos' and policyname = 'todos_update_own'
  ) then
    create policy todos_update_own
      on public.todos for update to authenticated
      using (auth.uid() = user_id);
  end if;
end$$;

do $$
begin
  if not exists (
    select 1 from pg_policies 
    where schemaname = 'public' and tablename = 'todos' and policyname = 'todos_delete_own'
  ) then
    create policy todos_delete_own
      on public.todos for delete to authenticated
      using (auth.uid() = user_id);
  end if;
end$$;

-- 5) Optional: Normalize constraint like the example (safe: NULL tasks still pass this check)
do $$
begin
  if not exists (
    select 1
    from pg_constraint
    where conname = 'todos_task_length_check'
      and conrelid = 'public.todos'::regclass
  ) then
    alter table public.todos
      add constraint todos_task_length_check
      check (char_length(task) > 3);
  end if;
end$$;

-- 6) Helpful index
create index if not exists idx_todos_user_id on public.todos(user_id);
