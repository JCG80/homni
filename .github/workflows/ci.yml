
name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  validate-migrations:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Start local Supabase
        run: supabase start
      
      - name: Validate migrations
        run: |
          echo "Validating SQL migrations..."
          for migration in supabase/migrations/*.sql; do
            echo "Validating $migration"
            supabase db reset --linked
            cat $migration | supabase db execute
            if [ $? -ne 0 ]; then
              echo "Migration $migration failed!"
              exit 1
            fi
          done
      
      - name: Test rollback scripts
        run: |
          echo "Testing rollback scripts..."
          for rollback in supabase/rollbacks/*.sql; do
            if [ -f "$rollback" ]; then
              echo "Testing rollback $rollback"
              supabase db reset --linked
              base_migration=$(basename $rollback .rollback.sql).sql
              if [ -f "supabase/migrations/$base_migration" ]; then
                cat "supabase/migrations/$base_migration" | supabase db execute
                cat $rollback | supabase db execute
                if [ $? -ne 0 ]; then
                  echo "Rollback $rollback failed!"
                  exit 1
                fi
              else
                echo "Warning: No matching migration for rollback $rollback"
              fi
            fi
          done
      
      - name: Stop Supabase
        if: always()
        run: supabase stop

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check for dependency conflicts
        run: npm ls
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Check Prettier formatting
        run: npm run format:check
      
      - name: Run security audit
        run: npm audit --production

  type-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run TypeScript compiler
        run: npx tsc --noEmit
      
      - name: Generate Supabase Types
        run: |
          chmod +x scripts/generate-supabase-types.sh
          SUPABASE_PROJECT_ID=${{ secrets.SUPABASE_PROJECT_ID }} ./scripts/generate-supabase-types.sh
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Start Supabase
        run: supabase start
      
      - name: Seed test users
        run: |
          chmod +x scripts/seed-test-users.sh
          ./scripts/seed-test-users.sh
        env:
          SUPABASE_URL: http://localhost:54321
          SUPABASE_SERVICE_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU
      
      - name: Run unit tests with coverage
        run: npm test -- --coverage
        
      - name: Check test coverage
        run: |
          COVERAGE=$(npx istanbul report text | grep "All files" | awk '{print $4}' | tr -d '%')
          if (( $(echo "$COVERAGE < 90" | bc -l) )); then
            echo "Test coverage is below 90% (actual: $COVERAGE%)"
            exit 1
          else
            echo "Test coverage meets requirement: $COVERAGE%"
          fi
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          SUPABASE_URL: http://localhost:54321
          SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0
      
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-reports
          path: |
            playwright-report/
            coverage/
          retention-days: 30
      
      - name: Stop Supabase
        if: always()
        run: supabase stop

  build:
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
        env:
          CI: false
      
      - name: Generate OpenAPI spec
        run: |
          npm run generate:api-docs
        continue-on-error: true
      
      - uses: actions/upload-artifact@v3
        with:
          name: build
          path: dist/
          retention-days: 5

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run SAST scan
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript, typescript
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run dependency vulnerability check
        run: npm audit --audit-level=high
        continue-on-error: true
      
      - name: Check for outdated packages
        run: npm outdated
        continue-on-error: true

  deploy-staging:
    needs: [build, validate-migrations]
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v3
      
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: dist
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Deploy to staging
        run: echo "Deploying to staging environment..."
        # Add your actual deployment command here
      
      - name: Apply migrations to staging
        run: echo "Applying migrations to staging database..."
        # Add your migration command here
      
      - name: Run smoke tests
        run: echo "Running smoke tests against staging..."
        # Add your smoke test command here

  deploy-production:
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: dist
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Deploy to production
        run: echo "Deploying to production environment..."
        # Add your actual deployment command here
      
      - name: Apply migrations to production
        run: echo "Applying migrations to production database..."
        # Add your migration command here
      
      - name: Run smoke tests
        run: echo "Running smoke tests against production..."
        # Add your smoke test command here
