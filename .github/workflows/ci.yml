name: Homni CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  # Supabase credentials moved to GitHub secrets for security
  SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

jobs:
  # Code Quality & Security
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Security
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Log CI job start
      run: npm run ci:log start
      
    - name: Boot smoke test
      run: npm run boot:smoke
      
    - name: Validate environment
      run: npm run env:check
      
    - name: Validate Supabase secrets
      run: |
        if [ -z "${{ secrets.SUPABASE_PROJECT_ID }}" ] || [ -z "${{ secrets.SUPABASE_ANON_KEY }}" ]; then
          echo "❌ Supabase secrets are missing or invalid"
          echo "Please configure SUPABASE_PROJECT_ID and SUPABASE_ANON_KEY in GitHub secrets"
          exit 1
        fi
        echo "✅ Supabase secrets are present"
      
    - name: Lint check
      run: npm run lint
      
    - name: Type check
      run: npm run type-check
      
    - name: Format check
      run: npm run format:check
      
    - name: Security audit
      run: npm audit --audit-level=high
      
    - name: Check for unused exports
      run: npm run unused-exports
      
    - name: Bundle size analysis
      run: npm run build && npm run bundle-analyzer

  # Database & Migrations
  database-tests:
    runs-on: ubuntu-latest
    name: Database & Migration Tests
    
    services:
      postgres:
        image: supabase/postgres:15.1.1.83
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Log CI job start
      run: npm run ci:log start
      
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Run database migrations
      run: |
        supabase db start
        supabase db reset --linked
        
    - name: Validate RLS policies
      run: npm run validate:rls
      
    - name: Test migration rollbacks
      run: npm run test:migration-rollback

  # Unit & Integration Tests
  test:
    runs-on: ubuntu-latest
    name: Unit & Integration Tests
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Log CI job start
      run: npm run ci:log start
      
    - name: Seed test data
      run: npm run seed:users
      
    - name: Run unit tests
      run: npm run test:unit -- --coverage --reporter=verbose
      
    - name: Run integration tests
      run: npm run test:integration
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Check coverage threshold
      run: npm run test:coverage-check

  # End-to-End Tests
  e2e:
    runs-on: ubuntu-latest
    name: E2E Tests
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Build application
      run: npm run build
      
    - name: Run E2E tests
      run: npm run test:e2e
      
    - name: Upload E2E artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  # Performance Tests
  performance:
    runs-on: ubuntu-latest
    name: Performance Tests
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Run performance tests
      run: npm run test:performance
      
    - name: Check performance budgets
      run: npm run performance:budget-check

  # Build & Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [code-quality, database-tests, test, e2e, performance]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.homni.no
      
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Run deployment checks
      run: npm run deploy:check
      
    - name: Deploy to staging
      run: npm run deploy:staging
      
    - name: Run smoke tests
      run: npm run test:smoke -- --env=staging

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [code-quality, database-tests, test, e2e, performance]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://homni.no
      
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Run deployment checks
      run: npm run deploy:check
      
    - name: Deploy to production
      run: npm run deploy:production
      
    - name: Run smoke tests
      run: npm run test:smoke -- --env=production
      
    - name: Notify deployment success
      run: npm run notify:deployment-success