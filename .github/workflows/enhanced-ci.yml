name: Enhanced CI with Observability

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  CYPRESS_CACHE_FOLDER: ~/.cache/Cypress

jobs:
  # Initial setup and validation
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Generate cache key
        id: cache-key
        run: echo "key=deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: npm ci

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: ${{ steps.cache-key.outputs.key }}

  # Enhanced linting and type checking
  quality-checks:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run TypeScript check
        run: |
          echo "üîç Running TypeScript checks..."
          npx tsc --noEmit --pretty
          echo "‚úÖ TypeScript checks passed"

      - name: Run ESLint with enhanced reporting
        run: |
          echo "üßπ Running ESLint..."
          npx eslint . --ext .ts,.tsx,.js,.jsx --format json --output-file eslint-report.json || true
          npx eslint . --ext .ts,.tsx,.js,.jsx
          echo "‚úÖ ESLint checks completed"

      - name: Run Prettier check
        run: |
          echo "üíÖ Checking code formatting..."
          npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"
          echo "‚úÖ Code formatting is correct"

      - name: Upload quality reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: quality-reports
          path: |
            eslint-report.json
            typescript-report.json

  # Unit tests with enhanced coverage
  unit-tests:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run unit tests with coverage
        run: |
          echo "üß™ Running unit tests with coverage..."
          npm run test:coverage -- --reporter=json --outputFile=test-results.json
          echo "‚úÖ Unit tests completed"

      - name: Generate coverage badge
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results
          path: |
            coverage/
            test-results.json

  # Enhanced E2E tests with multiple browsers
  e2e-tests:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, firefox, edge]
        include:
          - browser: chrome
            container: cypress/browsers:node18.12.0-chrome106-ff106
          - browser: firefox
            container: cypress/browsers:node18.12.0-chrome106-ff106
          - browser: edge
            container: cypress/browsers:node18.12.0-chrome106-ff106-edge

    container:
      image: ${{ matrix.container }}
      options: --user 1001

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies if cache miss
        run: npm ci

      - name: Verify Cypress installation
        run: npx cypress verify

      - name: Start development server
        run: |
          echo "üöÄ Starting development server..."
          npm run dev &
          npx wait-on http://localhost:8080 --timeout 120000
          echo "‚úÖ Development server is ready"

      - name: Run Enhanced E2E Tests - ${{ matrix.browser }}
        run: |
          echo "üß™ Running E2E tests on ${{ matrix.browser }}..."
          npx cypress run \
            --browser ${{ matrix.browser }} \
            --spec "cypress/e2e/lead-flow-enhanced.cy.ts" \
            --config video=true,screenshotOnRunFailure=true \
            --env ENABLE_OBSERVABILITY=true
          echo "‚úÖ E2E tests completed for ${{ matrix.browser }}"

      - name: Run Degraded Mode Tests
        run: |
          echo "üîß Running degraded mode tests..."
          npx cypress run \
            --browser ${{ matrix.browser }} \
            --spec "cypress/e2e/lead-flow-enhanced.cy.ts" \
            --config video=true \
            --env ENABLE_DEGRADED_MODE_TEST=true
          echo "‚úÖ Degraded mode tests completed"

      - name: Generate E2E Test Report
        if: always()
        run: |
          echo "üìä Generating enhanced test report..."
          node -e "
            const fs = require('fs');
            const report = {
              browser: '${{ matrix.browser }}',
              timestamp: new Date().toISOString(),
              environment: 'CI',
              testResults: 'See artifacts for detailed results'
            };
            fs.writeFileSync('cypress-report-${{ matrix.browser }}.json', JSON.stringify(report, null, 2));
          "

      - name: Upload E2E Test Artifacts - ${{ matrix.browser }}
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            cypress/videos/
            cypress/screenshots/
            cypress/reports/
            cypress-report-${{ matrix.browser }}.json
          retention-days: 7

  # Performance and accessibility tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Build application
        run: |
          echo "üèóÔ∏è Building application for performance testing..."
          npm run build
          echo "‚úÖ Build completed"

      - name: Analyze bundle size
        run: |
          echo "üì¶ Analyzing bundle size..."
          npx bundlesize
          echo "‚úÖ Bundle size analysis completed"

      - name: Run Lighthouse CI
        run: |
          echo "üí° Running Lighthouse performance audit..."
          npm install -g @lhci/cli
          lhci autorun || echo "Lighthouse audit completed with warnings"

      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-reports
          path: |
            .lighthouseci/
            bundle-analysis.json

  # Security and dependency checks
  security-checks:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Run security audit
        run: |
          echo "üîí Running security audit..."
          npm audit --audit-level high
          echo "‚úÖ Security audit completed"

      - name: Run dependency vulnerability scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            snyk-report.json
            security-audit.json

  # Final reporting and notification
  reporting:
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests, e2e-tests, performance-tests, security-checks]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate comprehensive report
        run: |
          echo "üìã Generating comprehensive CI report..."
          node -e "
            const fs = require('fs');
            const report = {
              timestamp: new Date().toISOString(),
              commit: '${{ github.sha }}',
              branch: '${{ github.ref_name }}',
              workflow: '${{ github.workflow }}',
              runNumber: '${{ github.run_number }}',
              actor: '${{ github.actor }}',
              summary: {
                qualityChecks: '${{ needs.quality-checks.result }}',
                unitTests: '${{ needs.unit-tests.result }}',
                e2eTests: '${{ needs.e2e-tests.result }}',
                performanceTests: '${{ needs.performance-tests.result }}',
                securityChecks: '${{ needs.security-checks.result }}'
              }
            };
            fs.writeFileSync('ci-comprehensive-report.json', JSON.stringify(report, null, 2));
            console.log('üìä Comprehensive report generated');
          "

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v3
        with:
          name: comprehensive-ci-report
          path: ci-comprehensive-report.json

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ci-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            üö® Enhanced CI Pipeline Failed
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}
            
            Failed Jobs:
            - Quality Checks: ${{ needs.quality-checks.result }}
            - Unit Tests: ${{ needs.unit-tests.result }}
            - E2E Tests: ${{ needs.e2e-tests.result }}
            - Performance: ${{ needs.performance-tests.result }}
            - Security: ${{ needs.security-checks.result }}

      - name: Notify on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#ci-updates'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            ‚úÖ Enhanced CI Pipeline Succeeded
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            All checks passed successfully! üéâ