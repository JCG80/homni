name: Status Sentinel
on:
  pull_request:
    branches: [ main ]
jobs:
  guard-status:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with: 
          fetch-depth: 0

      - name: Detect changed files
        id: diff
        run: |
          git fetch origin ${{ github.base_ref }} --depth=1
          git diff --name-only origin/${{ github.base_ref }}...HEAD > changed.txt
          echo "Changed files:"
          cat changed.txt

      - name: Check for core system changes
        id: core_changes
        run: |
          CHANGED="$(cat changed.txt)"
          REQUIRES_UPDATE=false
          
          # High-impact changes that require NOW.md update
          if echo "$CHANGED" | grep -Eq '^src/|^supabase/migrations/|^supabase/functions/'; then 
            REQUIRES_UPDATE=true
            echo "Core system changes detected"
          fi
          
          # Architecture documentation changes
          if echo "$CHANGED" | grep -Eq '^docs/roles-and-permissions\.md|^docs/data-models/|^docs/architecture/'; then
            REQUIRES_UPDATE=true
            echo "Architecture documentation changes detected"
          fi
          
          # Configuration changes
          if echo "$CHANGED" | grep -Eq '\.config\.(js|ts)$|^package\.json$|^tsconfig.*\.json$'; then
            REQUIRES_UPDATE=true
            echo "Configuration changes detected"
          fi
          
          echo "requires_update=$REQUIRES_UPDATE" >> $GITHUB_OUTPUT

      - name: Verify status documentation updated when required
        if: steps.core_changes.outputs.requires_update == 'true'
        run: |
          # Check if either the new status source or legacy NOW.md was updated
          UPDATED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          
          if echo "$UPDATED_FILES" | grep -q "src/content/status/status-latest.md"; then
            echo "‚úÖ New status source file updated: src/content/status/status-latest.md"
          elif echo "$UPDATED_FILES" | grep -q "docs/status/NOW.md"; then
            echo "‚úÖ Legacy status file updated: docs/status/NOW.md"
          else
            echo "::error ::Core system changes detected but no status documentation updated."
            echo "::error ::The following changes require status documentation:"
            cat changed.txt | grep -E '^src/|^supabase/|^docs/(roles|data-models|architecture)' || true
            echo "::error ::Please update either:"
            echo "::error ::  - src/content/status/status-latest.md (preferred)"
            echo "::error ::  - docs/status/NOW.md (legacy)"
            exit 1
          fi

      - name: Validate status documentation freshness
        if: steps.core_changes.outputs.requires_update == 'true'
        run: |
          # Check which status file exists and validate it
          if [ -f "src/content/status/status-latest.md" ]; then
            STATUS_FILE="src/content/status/status-latest.md"
            echo "Using new status source: $STATUS_FILE"
          elif [ -f "docs/status/NOW.md" ]; then
            STATUS_FILE="docs/status/NOW.md"
            echo "Using legacy status file: $STATUS_FILE"
          else
            echo "::error ::No status documentation found"
            exit 1
          fi
          
          # Check if status file was modified recently (within last 24 hours of PR)
          LAST_MODIFIED=$(git log -1 --format="%ai" -- "$STATUS_FILE" 2>/dev/null || echo "")
          
          if [ -n "$LAST_MODIFIED" ]; then
            TWENTY_FOUR_HOURS_AGO=$(date -d "24 hours ago" --iso-8601=seconds)
            if [[ "$LAST_MODIFIED" < "$TWENTY_FOUR_HOURS_AGO" ]]; then
              echo "::warning ::$STATUS_FILE last modified: $LAST_MODIFIED"
              echo "::warning ::This seems outdated for current PR changes"
            fi
          fi

      - name: Check required sections in status documentation
        if: steps.core_changes.outputs.requires_update == 'true'
        run: |
          # Determine which status file to validate
          if [ -f "src/content/status/status-latest.md" ]; then
            STATUS_FILE="src/content/status/status-latest.md"
            echo "Validating new status format: $STATUS_FILE"
            
            # Check for required sections in new format
            if ! grep -q "üìç \*\*N√ÖV√ÜRENDE FASE-STATUS\*\*\|CORE FEATURES" "$STATUS_FILE"; then
              echo "::warning ::$STATUS_FILE missing CORE FEATURES section"
            fi
            if ! grep -q "üîÑ \*\*IN PROGRESS\*\*\|IN PROGRESS" "$STATUS_FILE"; then
              echo "::warning ::$STATUS_FILE missing IN PROGRESS section"
            fi
            if ! grep -q "üõ†Ô∏è \*\*TYPESCRIPT & TEKNISK GJELD\*\*\|TECHNICAL DEBT" "$STATUS_FILE"; then
              echo "::warning ::$STATUS_FILE missing TECHNICAL DEBT section"
            fi
            
            # Validate structure using validation script if available
            if [ -f "scripts/status-validation.ts" ] && command -v npx &> /dev/null; then
              echo "Running automated validation..."
              npx tsx scripts/status-validation.ts || echo "::warning ::Status validation script failed"
            fi
            
          elif [ -f "docs/status/NOW.md" ]; then
            STATUS_FILE="docs/status/NOW.md"
            echo "Validating legacy status format: $STATUS_FILE"
            
            # Check for required sections in legacy format
            if ! grep -q "## üéØ \*\*CORE FEATURES\|CORE FEATURES" "$STATUS_FILE"; then
              echo "::warning ::$STATUS_FILE missing CORE FEATURES section"
            fi
            if ! grep -q "## üöß \*\*IN PROGRESS\|IN PROGRESS" "$STATUS_FILE"; then
              echo "::warning ::$STATUS_FILE missing IN PROGRESS section"
            fi
            if ! grep -q "## üîí \*\*TECHNICAL DEBT\|TECHNICAL DEBT" "$STATUS_FILE"; then
              echo "::warning ::$STATUS_FILE missing TECHNICAL DEBT section"
            fi
          else
            echo "::error ::No status documentation file found"
            exit 1
          fi
          
          echo "‚úÖ Status documentation structure validation complete"

      - name: Status Sentinel Summary
        if: always()
        run: |
          echo "üìä Status Sentinel Report"
          echo "========================="
          if [ "${{ steps.core_changes.outputs.requires_update }}" == "true" ]; then
            echo "üéØ Core changes detected - Status update required"
            
            # Check which status file was updated
            UPDATED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD || echo "")
            
            if echo "$UPDATED_FILES" | grep -q "src/content/status/status-latest.md"; then
              echo "‚úÖ New status source updated: src/content/status/status-latest.md"
            elif echo "$UPDATED_FILES" | grep -q "docs/status/NOW.md"; then
              echo "‚úÖ Legacy status file updated: docs/status/NOW.md"
            else
              echo "‚ùå No status documentation updated"
            fi
          else
            echo "‚ÑπÔ∏è  No core changes detected - Status update optional"
          fi